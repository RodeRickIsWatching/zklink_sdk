namespace zklink_sdk {};

[Error]
enum ZkSignerError {
    "CustomError",
    "InvalidSignature",
    "InvalidPrivKey",
    "InvalidSeed",
    "InvalidPubkey",
    "InvalidPubkeyHash",
    "PackedETHSignatureError",
};

interface PubKeyHash {
    [Name=zero]
    constructor();
    [Throws=ZkSignerError,Name=from_hex]
    constructor([ByRef] string s);
    [Throws=ZkSignerError,Name=from_bytes]
    constructor([ByRef] sequence<u8> bytes);
string as_hex();
};

interface PackedPublicKey {
    [Throws=ZkSignerError,Name=from_bytes]
    constructor([ByRef] sequence<u8> bytes);
    [Name=from_private_key]
    constructor([ByRef] PackedPrivateKey pk);
sequence<u8> as_bytes();
string as_hex();
PubKeyHash public_key_hash();
};

interface PackedPrivateKey {
    [Throws=ZkSignerError]
    constructor();
    [Throws=ZkSignerError,Name=new_from_seed]
    constructor([ByRef] sequence<u8> seed);
    [Throws=ZkSignerError,Name=new_from_hex_eth_signer]
    constructor([ByRef] string eth_hex_private_key);
    [Throws=ZkSignerError,Name=new_from_bytes]
    constructor([ByRef] sequence<u8> bytes);
PackedPublicKey public_key();
};

interface ZkLinkSigner {
    [Throws=ZkSignerError]
    constructor();
    [Throws=ZkSignerError,Name=new_from_seed]
    constructor([ByRef] sequence<u8> seed);
    [Throws=ZkSignerError,Name=new_from_hex_eth_signer]
    constructor([ByRef] string eth_hex_private_key);
    [Throws=ZkSignerError,Name=new_from_bytes]
    constructor([ByRef] sequence<u8> slice);
PackedPublicKey public_key();
    [Throws=ZkSignerError]
    ZkLinkSignature sign_musig([ByRef] sequence<u8> msg);
};

interface ZkLinkSignature {
    [Throws=ZkSignerError,Name=from_bytes]
    constructor([ByRef] sequence<u8> bytes);
    [Throws=ZkSignerError,Name=from_hex]
    constructor([ByRef] string s);
sequence<u8> as_bytes();
string as_hex();
    [Throws=ZkSignerError]
    boolean verify_musig([ByRef] sequence<u8> msg);
};

[Error]
enum TypeError {
    "InvalidAddress",
    "NotStartWithZerox",
    "SizeMismatch",
    "DecodeFromHexErr",
};

interface ZkLinkAddress {
    [Throws=TypeError, Name=from_slice]
    constructor([ByRef] sequence<u8> slice);
    [Throws=TypeError, Name=from_str]
    constructor([ByRef] string s);
    string to_string();
    boolean is_zero();
    boolean is_global_account_address();
};

interface TxHash {
    [Throws=TypeError, Name=from_slice]
    constructor([ByRef] sequence<u8> slice);
    [Throws=TypeError, Name=from_str]
    constructor([ByRef] string s);
    string to_string();
};

[Custom]
typedef u32 SlotId;
[Custom]
typedef u32 TokenId;
[Custom]
typedef u16 PairId;
[Custom]
typedef u32 TimeStamp;
[Custom]
typedef u32 AccountId;
[Custom]
typedef u32 BlockNumber;
[Custom]
typedef u32 Nonce;
[Custom]
typedef u64 PriorityOpId;
[Custom]
typedef u64 EthBlockId;
[Custom]
typedef u8 ChainId;
[Custom]
typedef u8 SubAccountId;
