namespace zklink_sdk {};

// ============================  crypto  ============================
[Error]
enum ZkSignerError {
    "CustomError",
    "InvalidSignature",
    "InvalidPrivKey",
    "InvalidSeed",
    "InvalidPubkey",
    "InvalidPubkeyHash",
    "PackedETHSignatureError",
};

interface PubKeyHash {
    [Name=zero]
    constructor();
    [Throws=ZkSignerError,Name=from_hex]
    constructor([ByRef] string s);
    [Throws=ZkSignerError,Name=from_bytes]
    constructor([ByRef] sequence<u8> bytes);
string as_hex();
};

interface PackedPublicKey {
    [Throws=ZkSignerError,Name=from_bytes]
    constructor([ByRef] sequence<u8> bytes);
    [Name=from_private_key]
    constructor([ByRef] PackedPrivateKey pk);
    sequence<u8> as_bytes();
    string as_hex();
    PubKeyHash public_key_hash();
};

interface PackedPrivateKey {
    [Throws=ZkSignerError]
    constructor();
    [Throws=ZkSignerError,Name=new_from_seed]
    constructor([ByRef] sequence<u8> seed);
    [Throws=ZkSignerError,Name=new_from_hex_eth_signer]
    constructor([ByRef] string eth_hex_private_key);
    [Throws=ZkSignerError,Name=new_from_bytes]
    constructor([ByRef] sequence<u8> bytes);
PackedPublicKey public_key();
};

interface ZkLinkSigner {
    [Throws=ZkSignerError]
    constructor();
    [Throws=ZkSignerError,Name=new_from_seed]
    constructor([ByRef] sequence<u8> seed);
    [Throws=ZkSignerError,Name=new_from_hex_eth_signer]
    constructor([ByRef] string eth_hex_private_key);
    [Throws=ZkSignerError,Name=new_from_bytes]
    constructor([ByRef] sequence<u8> slice);
    PackedPublicKey public_key();
    [Throws=ZkSignerError]
    ZkLinkSignature sign_musig([ByRef] sequence<u8> msg);
};

interface ZkLinkSignature {
    [Throws=ZkSignerError,Name=from_bytes]
    constructor([ByRef] sequence<u8> bytes);
    [Throws=ZkSignerError,Name=from_hex]
    constructor([ByRef] string s);
sequence<u8> as_bytes();
string as_hex();
    [Throws=ZkSignerError]
    boolean verify_musig([ByRef] sequence<u8> msg);
};

// ============================  basic types  ============================
[Error]
enum TypeError {
    "InvalidAddress",
    "InvalidTxHash",
    "NotStartWithZerox",
    "SizeMismatch",
    "DecodeFromHexErr",
};

[Custom]
typedef u32 SlotId;
[Custom]
typedef u32 TokenId;
[Custom]
typedef u16 PairId;
[Custom]
typedef u32 TimeStamp;
[Custom]
typedef u32 AccountId;
[Custom]
typedef u32 BlockNumber;
[Custom]
typedef u32 Nonce;
[Custom]
typedef u64 PriorityOpId;
[Custom]
typedef u64 EthBlockId;
[Custom]
typedef u8 ChainId;
[Custom]
typedef u8 SubAccountId;
[Custom]
typedef string H256;
[Custom]
typedef string BigUint;
[Custom]
typedef string ZkLinkAddress;
[Custom]
typedef string TxHash;



// ============================  transaction types  ============================

interface Deposit {
    constructor(
        ChainId from_chain_id,
        ZkLinkAddress from,
        SubAccountId sub_account_id,
        ZkLinkAddress to,
        TokenId l2_target_token,
        TokenId l1_source_token,
        BigUint amount,
        u64 serial_id,
        H256 eth_hash
    );
    sequence<u8> get_bytes();
};
